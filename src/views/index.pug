doctype html
html(lang='zh-Hans')
  head
    meta(charset='utf-8')
    meta(name='viewport' content='width=device-width')
    title= title
    link(rel='icon' type='image/x-icon' href='/favicon.ico')
    link(rel='icon' type='image/png' href='/hong.png')
    link(rel='stylesheet' href='vex.css')
    link(rel='stylesheet' href='vex-theme-os.css')
    style.
      @font-face {
        font-family: 'Song';
        src: url('/fonts/SourceHanSerifCN-Bold.woff2') format('woff2'),
             url('/fonts/SourceHanSerifCN-Bold.woff') format('woff'),
             url('/fonts/SourceHanSerifCN-Bold.ttf') format('truetype');
      }
      @font-face {
        font-family: 'Hei';
        src: url('/fonts/SourceHanSansSC-Regular.woff2') format('woff2'),
             url('/fonts/SourceHanSansSC-Regular.woff') format('woff'),
             url('/fonts/SourceHanSansSC-Regular.ttf') format('truetype');
      }
      @font-face {
        font-family: 'Kai';
        src: url('/fonts/FZKTK.woff2') format('woff2'),
             url('/fonts/FZKTK.woff') format('woff'),
             url('/fonts/FZKTK.ttf') format('truetype');
      }
      svg text {
        font-family: Hei, sans-serif;
        -webkit-font-smoothing: subpixel-antialiased;
        font-smoothing: subpixel-antialiased;
        text-anchor: middle;
        dominant-baseline: text-before-edge;
      }
      svg .title-text {
        font-family: Song, serif;
        font-size: 72pt;
      }
      svg .subtitle {
        font-size: 24pt;
      }
      svg .comment {
        font-size: 18pt;
        text-anchor: start;
      }
      svg .link-text {
        font-size: 14pt;
        text-anchor: middle;
      }
      svg .link-text-bg {
        fill: #FFF;
      }
      svg .comment-border {
        fill: #DDD;
      }
      svg .node-name {
        font-family: Kai, sans-serif;
        font-size: 20pt;
      }
      svg .node-spouse {
        font-size: 10pt;
      }
      svg .node-note {
        font-size: 10pt;
      }
      svg .text-generation {
        font-size: 10pt;
      }
      svg .link {
        stroke: #000;
        stroke-width: 1;
      }
      svg .bold-line {
        stroke: #000;
        stroke-width: 4;
      }
      svg .special-link {
        stroke: #000;
        stroke-width: 1;
        stroke-dasharray: 5, 2;
      }
      svg .line-generation {
        stroke: #000;
        stroke-width: 1;
        stroke-dasharray: 2, 8;
      }
      svg .node-border {
        stroke: #000;
        stroke-width: 2;
      }
      svg .detail-button {
        fill-opacity: 0.15;
      }
  body
    div#main
      svg#canvas

    script!= 'var familyData = ' + JSON.stringify(family) + ', titleData = "' + title + '", subtitleData = "' + subtitle + '", commentData = "' + comment + '", detailData = ' + JSON.stringify(detail) + ', changelog = "' + changelog + '";'
    script(src='/vex.combined.min.js')
    script vex.defaultOptions.className='vex-theme-os'
    script(src='/svg.min.js')
    script(src='/is.min.js')
    script(src='/main.js')
    script.
      var t1 = performance.now();
      var treeInfo = nodesToTree(familyData, undefined, undefined, function(d) {
        if (d.Id >= 200) {
          if (d.Name && d.Name.length == 1) {
            return ' ' + d.Name + ' ';
          } else {
            return d.Name;
          }
        } else {
          return d.Name;
        }
      }, function(d) {
        ret = [];
        if (d.Alias) {
          ret.push('又名：' + d.Alias);
        }
        if (d.Spouse) {
          if (is.array(d.Spouse)) {
            var ret = [];
            ret.push('元：' + d.Spouse[0]); 
            ret.push('继：' + d.Spouse[1]);
          } else {
            var prefix = '偶：';
            if (d.Gender && d.Gender === 'M') prefix = '妻：';
            else if (d.Gender && d.Gender === 'F') prefix = '夫：';
            ret.push(prefix + d.Spouse);
          }
        }
        return ret;
      });
      var t2 = performance.now();
      console.log("Parsing data: " + (t2 - t1) + "ms");
      var root = treeInfo.root;
      var id2Index = treeInfo.id2Index;
      var members = treeInfo.members;

      var t3 = performance.now();
      var layoutInfo = layoutTree(members, id2Index);
      var t4 = performance.now();
      console.log("Building tree layout: " + (t4 - t3) + "ms");
      var generationOffset = layoutInfo.generationOffset;
      var size = layoutInfo.size;

      var repeat = function(str, n) {
        var ret = "";
        for (var i = 0; i < n; i++)
          ret = ret + str;
        return ret;
      };

      var paper = SVG('canvas');
      var titleBar = paper.group();
      var title = titleBar
        .text(titleData)
        .move(size.width / 2, 0)
        .addClass('title-text')
        .attr('dx', '0' + repeat(' 24', titleData.length - 1))
        .transform({ scaleX: 1.4 });
      if (is.ie() || is.edge()) {
        title.attr('y', title.bbox().height * 0.8);
      }
      var titleHeight = title.bbox().height;
      var subtitle = titleBar
        .text(subtitleData)
        .move(size.width / 2, titleHeight + 40)
        .addClass('subtitle');
      if (is.ie() || is.edge()) {
        subtitle.attr('y', titleHeight + 40 + subtitle.bbox().height * 0.8);
      }

      var content = paper.group().transform({
        x: 0,
        y: titleBar.bbox().height + 70
      });

      var t5 = performance.now();
      for (var i = 0; i < members.length; i++) {
        drawNode(paper, content, members[i]);
      }
      var t6 = performance.now();
      console.log("Drawing node: " + (t6 - t5) + "ms");

      var t7 = performance.now();
      for (var i = 0; i < members.length; i++) {
        drawChildrenLink(paper, content, members[i], treeInfo, layoutInfo);
      }
      var t8 = performance.now();
      console.log("Drawing link: " + (t8 - t7) + "ms");

      var t9 = performance.now();
      drawGeneration(paper, content, layoutInfo);
      // setupDetailButton(paper, content, detailData, treeInfo);
      var t10 = performance.now();
      console.log("Drawing other parts: " + (t10 - t9) + "ms");

      // var commentText = paper
      //   .text()
      //   .move(100, layoutInfo.nodePerLevel[4][layoutInfo.nodePerLevel[4].length-1].y + 200)
      //   .addClass('comment');
      //   commentText.selectAll('tspan:nth-child(n+2)')
      //   .attr({ dy: "1.2em" , x: 100 });
      // var commentBBox = commentText.bbox();
      // var commentRect = paper
      //   .rect(commentBBox.width + 80, commentBBox.height + 80)
      //   .move(commentBBox.x - 40, commentBBox.y - 40)
      //   .addClass('comment-border');
      // content.add(commentRect, commentText);

      // var changelogText = paper
      //   .text(changelog.split("\n"))
      //   .move(100, layoutInfo.nodePerLevel[4][layoutInfo.nodePerLevel[4].length-1].y + 200 + commentBBox.height + 100)
      //   .addClass('comment');
      //   changelogText.selectAll('tspan:nth-child(n+2)')
      //   .attr({ dy: "1.2em" , x: 100 });
      // var changelogBBox = changelogText.bbox();
      // var changelogRect = paper
      //   .rect(changelogBBox.width + 80, changelogBBox.height + 80)
      //   .move(changelogBBox.x - 40, changelogBBox.y - 40)
      //   .addClass('comment-border');
      // content.add(changelogRect, changelogText);

      paper.attr("width", size.width);
      paper.attr("height", titleBar.bbox().height + content.bbox().height + 40);
